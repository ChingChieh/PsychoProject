#!/usr/bin/env python3
from stop_view import Ui_MainWindow as Ui_stop
from ui import Ui_MainWindow as Ui_play
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5 import *
from ast import literal_eval
import random
import socket
import select
import json
import time
import sys

class MainWindow(QMainWindow):
  def __init__(self, sock, parent=None):
    super(MainWindow, self).__init__(parent)
    self.mode_dic = {'init': 1, 'start':2, 'stop':3, 'alloc':4, 'wait':5, 'chosen':6, 'fail':7, 'group':8, 'recd':9}
    self.mode = 1
    self.my_id = 0
    self.other_id = 0
    self.recv_data = 0
    self.sock = sock
    self.my_result = -1
    self.select_id = -1
    self.other_result = -1
    self.group_src = [0,0,0]
    self.store_list = []
    self.if_fail = False
    self.first_start = True
    self.if_allcator = True
    self.first_in_alloc = True
    self.TRAIL_NUM = 48
    self.trail = self.TRAIL_NUM
    self.RUN_NUM = 3
#### time
    self.time_list = []
    self.start_t = 0
    self.end_t = 0
    self.timer_start = QTimer(self)
    self.timer_start.timeout.connect(self.set_start_view)
    self.timer_stop = QTimer(self)
    self.timer_stop.timeout.connect(self.set_stop_view)
    self.timer_alloc = QTimer(self)
    self.timer_alloc.timeout.connect(self.set_alloc_view)
    self.timer_group = QTimer(self)
    self.timer_group.timeout.connect(self.set_group_view)
    self.timer_result = QTimer(self)
    self.timer_result.timeout.connect(self.set_alloc_re_view)
    self.timer_fail = QTimer(self)
    self.timer_fail.timeout.connect(self.fail_handler)
    self.timer_wait = QTimer(self)
    self.timer_wait.timeout.connect(self.set_wait_view)
#### UI
    self.QtStack = QtWidgets.QStackedLayout()
    self.screen = QDesktopWidget().screenGeometry ()
   # self.showFullScreen()
    self.Ui_setup()
    self.recv_data = self.sock.recv(1024).decode()
    self.my_id = int(self.recv_data)
    print("my id = ", self.my_id)
    self.left_id, self.right_id = self.get_id(self.my_id)
    self.set_id(self.my_id)
    self.resize(self.screen.width(),self.screen.height())
    print(sock.recv(1024).decode())

  def ConnectToServer(self, data):
    print("send data: ", data)
    self.sock.send(str(data).encode())
    self.recv_data = self.sock.recv(1024).decode()
    print("receive data :" + self.recv_data)

  def Ui_setup(self):
    try:
      self.show()
      self.mode = self.mode_dic['init']
      self.start_view = Ui_play()
      self.start_view.setupUi(self)
      self.stop_view = Ui_stop()
      self.stop_view.setupUi(self)
      self.stop_view.label.setText("Press 5")
      self.start_view.centralwidget.resize(self.screen.width(),self.screen.height())
      self.stop_view.centralwidget.resize(self.screen.width(),self.screen.height())
      self.QtStack.addWidget(self.start_view.centralwidget)
      self.QtStack.addWidget(self.stop_view.centralwidget)
      self.QtStack.setCurrentIndex(1)

    except Exception as e:
       print(e)

  def set_start_view(self):
    #self.set_wait_view()
    print("########## In start view")
    self.restart_init()
    self.timer_start.stop()
    if self.mode != self.mode_dic['init'] and self.mode != self.mode_dic['recd']:
      self.recv_data = self.sock.recv(1024).decode()
      print("receive data:", self.recv_data)
    src_list = str_to_list(self.recv_data)
    if self.mode != self.mode_dic['init'] and self.mode == self.mode_dic['recd']:
      src_list = self.store_list
      print("store_list data:", self.store_list)
    self.start_t = time.time()
    self.time_list.append(self.start_t)
    print("Start Time: ", self.start_t)
    self.set_src(self.my_id, src_list)
    self.mode = self.mode_dic['start']
    self.QtStack.setCurrentIndex(0)
    self.set_timer(self.timer_stop, 3)
    self.set_timer(self.timer_fail, 3)

  def set_stop_view(self):
    self.timer_stop.stop()
    print("########## In stop view")
    print(time.time())
    if self.mode == self.mode_dic['chosen']:
      self.end_t = time.time()
      use_t = self.end_t - self.start_t
      print("group chosen, set timer to see group after  ", 5 - use_t)
      if use_t <= 3:
        self.set_timer(self.timer_group, 5 - use_t)
      else:
        self.set_timer(self.timer_group, 2)
    elif self.mode == self.mode_dic['alloc']:
      print("Allocator in stop mode(3)")
      self.first_in_alloc = True
      self.if_allcator = True
      alloc_result = [0,0,0]
      alloc_result[self.my_id-1] = self.my_result
      alloc_result[self.other_id-1] = self.other_result
      print(self.my_id)
      print(self.other_id)
      print(self.my_result)
      print(self.other_result)
      print("alloc_result: ", alloc_result)
      self.ConnectToServer(alloc_result)
      self.set_timer(self.timer_result, 2)
    elif self.mode == self.mode_dic['group'] and self.if_allcator == False:
      print("Allocatee in stop mode(2)")
      self.set_timer(self.timer_wait, 2)
      self.set_timer(self.timer_result, 8)

    self.mode = self.mode_dic['stop']
    self.stop_view.label.setText("+")
    self.QtStack.setCurrentIndex(1)

  def set_wait_view(self):
    self.timer_wait.stop()
    print("########## In wait view")
    print(time.time())
    print("wait for restarting")
    self.stop_view.label.setText("Wait")
    if self.if_fail == True or self.mode == self.mode_dic['fail']:
      print("In fail case")
      self.set_timer(self.timer_start, 8)
      self.stop_view.label.setText("Fail & Wait")
      self.if_fail = False
    else:
      self.set_timer(self.timer_result, 6)
    self.mode = self.mode_dic['wait']
    self.QtStack.setCurrentIndex(1)

  def set_alloc_view(self):
    self.timer_alloc.stop()
    print("########## In alloc view")
    print(time.time())
    self.mode = self.mode_dic['alloc']
    self.mask_alloc()
    my_src = random.randint(0,11)
    #my_src = self.group_src[self.my_id-1]
    self.init_alloc_view(my_src)
    other_src = 11 - my_src
    self.my_result = my_src
    self.other_result = other_src
    if self.my_id%3+1 == self.other_id:
      self.start_view.src_3.setText(str(other_src))
      other_src = int(self.start_view.src_3.text())
    else:
      self.start_view.src_1.setText(str(other_src))
      other_src = int(self.start_view.src_1.text())

    self.QtStack.setCurrentIndex(0)
    if self.first_in_alloc == True:
      self.first_in_alloc = False
      self.set_timer(self.timer_stop, 4)

  def set_group_view(self):
    self.timer_group.stop()
    self.mode = self.mode_dic['group']
    print("########## In group view")
    print(time.time())
    print("group_view recv data: ", self.recv_data )
    re_list = str_to_list(self.recv_data) #re_list : tuple[group result][who can allocate]
    self.group_src = re_list[1]
    if re_list[0][0] == -1 or re_list[0][1] == -1 or re_list[0][2] == -1 or sum(re_list[1]) == -3:
      print("group fail")
      self.if_fail = True
      self.mode = self.mode_dic['fail']
      self.set_timer(self.timer_wait, 4)
    else:
      self.other_id = re_list[0][self.my_id-1]
    self.start_view.alloc_1.setText(str(re_list[0][self.left_id-1]))
    self.start_view.alloc_2.setText(str(re_list[0][self.my_id-1]))
    self.start_view.alloc_3.setText(str(re_list[0][self.right_id-1]))
    self.QtStack.setCurrentIndex(0)
    self.set_timer(self.timer_stop, 2)
    if self.mode != self.mode_dic['fail']:
      if re_list[1][self.my_id-1] == 1:
        print("allocator set timer_alloc 4s in GV")
        self.set_timer(self.timer_alloc, 4)
      else:
        self.if_allcator = False
        print("allocatee set timer_wait 4s in GV")
        self.set_timer(self.timer_wait, 4)

  def set_alloc_re_view(self):
    self.timer_result.stop()
    print("########## In allocate result view")
    print("### time_list = ", self.time_list)
    print(time.time())
    print("mode", self.mode)
    print("if allocator", self.if_allcator)
#####FIXME
    if self.mode == self.mode_dic['wait'] and self.if_allcator == False:
      print("Allocatee in result view and recv data")
      self.mode = self.mode_dic['recd']
      self.recv_data = self.sock.recv(1024).decode()
      print("receive data:", self.recv_data)
      print(type(self.recv_data))
      if len(self.recv_data) != 9:
        self.recv_data = self.recv_data.replace('][',' ],[')
    src_list = str_to_list(self.recv_data)
    print("src_list  ", src_list)
    if type(src_list) == tuple:
      self.store_list = src_list[1]
      src_list = src_list[0]
      print(self.store_list)
    self.set_src(self.my_id, src_list)
    #self.mode = self.mode_dic['wait']
    self.mask_alloc()
    self.QtStack.setCurrentIndex(0)
    self.set_timer(self.timer_start, 2)

  def keyPressEvent(self, event):
    assert(self.my_id != self.other_id), "my id is the same to other id. "
    key = event.key()
    if key == QtCore.Qt.Key_Escape:
      self.showNormal()
    elif self.mode == self.mode_dic['init'] and key == QtCore.Qt.Key_5:
      print("press 5")
      self.ConnectToServer(5)
      self.set_start_view()
    elif self.mode == self.mode_dic['start'] and ( key == QtCore.Qt.Key_2 or key == QtCore.Qt.Key_1):
      self.time_list.append(time.time())
      self.mode = self.mode_dic['chosen']
      self.timer_fail.stop()
      if key == QtCore.Qt.Key_1:
        self.select_id = self.left_id
      elif key == QtCore.Qt.Key_2:
        self.select_id = self.right_id
      self.time_list.append(self.select_id)
      self.ConnectToServer(self.time_list)
    ##  self.ConnectToServer(self.select_id)
      self.set_stop_view()
    elif self.mode == self.mode_dic['alloc'] and key == QtCore.Qt.Key_1:
      self.alloc_src(self.my_id, self.other_id, -1)
    elif self.mode == self.mode_dic['alloc'] and key == QtCore.Qt.Key_2:
      self.alloc_src(self.my_id, self.other_id, 1)

  def fail_handler(self):
    self.timer_fail.stop()
    self.time_list.append(-1)
    self.time_list.append(-1)
    self.ConnectToServer(self.time_list)
    print("########## In fail handler")
    self.if_fail = True
    self.mode = self.mode_dic['wait']
    self.set_timer(self.timer_group, 2)

  def set_id(self, my_id):
    # my_id : int
    id = [1, 2 ,3]
    my_id -= 1
    self.start_view.pos_2.setText("ID : " + str(id[my_id]))
    self.start_view.pos_3.setText("ID : " + str(id[(my_id+1)%3]))
    self.start_view.pos_1.setText("ID : " + str(id[(my_id+2)%3]))
    QApplication.processEvents()

  def set_src(self, my_id, src_list):
    # my_id : int, src_list : int list
    my_id -= 1
    self.start_view.src_2.setText(str(src_list[my_id]))
    self.start_view.src_3.setText(str(src_list[(my_id+1)%3]))
    self.start_view.src_1.setText(str(src_list[(my_id+2)%3]))
    QApplication.processEvents()

  def alloc_src(self, my_id, other_id, add_minus):
    my_src = int(self.start_view.src_2.text())
    if my_src == 0 and add_minus == -1:
      return
    if my_id%3+1 == other_id:
      other_src = int(self.start_view.src_3.text())
      if other_src == 0 and add_minus == 1:
        return
      self.other_result = other_src - add_minus
      self.start_view.src_3.setText(str(self.other_result))
    else:
      other_src = int(self.start_view.src_1.text())
      if other_src == 0 and add_minus == 1:
        return
      self.other_result = other_src - add_minus
      self.start_view.src_1.setText(str(self.other_result))

    self.my_result = my_src + add_minus
    self.start_view.src_2.setText(str(self.my_result))
    self.setCentralWidget(self.start_view.centralwidget)

  def set_timer(self, timer, wait_time):
    timer.start(round(wait_time * 1000))

  def get_id(self, my_id):
    my_id -= 1
    id = [1, 2 ,3]
    left_id = id[(my_id+2)%3]
    right_id = id[(my_id+1)%3]
    return left_id, right_id

  def mask_alloc(self):
    self.start_view.alloc_1.setText("")
    self.start_view.alloc_2.setText("")
    self.start_view.alloc_3.setText("")

  def init_alloc_view(self, my_src):
    self.start_view.src_1.setText("")
    self.start_view.src_2.setText(str(my_src))
    self.start_view.src_3.setText("")
    self.start_view.src_1.setStyleSheet("color : gray;")
    self.start_view.src_3.setStyleSheet("color : gray;")

  def restart_init(self):
    self.start_view.src_1.setStyleSheet("color : black;")
    self.start_view.src_2.setStyleSheet("color : black;")
    self.start_view.src_3.setStyleSheet("color : black;")
    self.if_allcator = True
    self.if_fail = False
    self.mask_alloc()
    if self.first_start:
      self.first_start = False
    else:
    # TODO send msg
      print("### time_list = ", self.time_list)
      self.time_list = []

    self.trail -= 1
    print('**** trail' ,self.trail)

    if self.trail == -1:
      self.trail_end()
      self.set_timer(self.timer_start, 2)

  def game_end(self):
    self.stop_all_timer()
    self.stop_view.label.setText("End")
    self.QtStack.setCurrentIndex(1)

  def trail_end(self):
    # trail
    self.trail = self.TRAIL_NUM
    self.RUN_NUM -= 1
    if self.RUN_NUM == 0:
      game_end()
     # exit()
    self.stop_all_timer()
    self.stop_view.label.setText("Shuffle")
    self.QtStack.setCurrentIndex(1)
    #TODO rec msg and set id

    self.recv_data = self.sock.recv(1024).decode()
    self.my_id = int(self.recv_data)
    print("my id = ", self.my_id)
    self.left_id, self.right_id = self.get_id(self.my_id)
    self.set_id(self.my_id)

  def stop_all_timer(self):
    self.timer_result.stop()
    self.timer_start.stop()
    self.timer_group.stop()
    self.timer_alloc.stop()
    self.timer_stop.stop()
    self.timer_fail.stop()
    self.timer_wait.stop()

#########

def ui_setup(sock):
  app = QApplication(sys.argv)
  window = MainWindow(sock)
  window.show()
  sys.exit(app.exec_())
  return app, window

def str_to_list(str_data):
  try:
    print("str_to_list:",str_data)
    return literal_eval(str_data)
  except Exception as e:
     print(e)

def main():
  msg = [{'src':"yeeeeeeee",'dst':"hahahaha"}]
  jmsg = json.dumps(msg)
  TimeOut = 10

  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    Host = socket.gethostbyname(socket.gethostname())
   # Host = "192.168.0.102"
    print("Host:",Host)
    sock.connect((Host, 10001))
    print("wait for server...")

    app, window = ui_setup(sock)
    sock.close()

if __name__ == "__main__":
  main()
